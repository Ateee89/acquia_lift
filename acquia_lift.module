<?php

/**
 * @file
 * Drupal Module: Acquia Lift
 *
 * Acquia Lift lets you track customers' behavior throughout their buying
 * journey â€” from anonymous visitor through to loyal customer. Acquia Lift
 * allows you to create a unified customer profile for each individual, based
 * on their interactions with your website. Using these profiles, Acquia Lift
 * adaptively segments customers in real-time, letting you deliver personalized
 * content that furthers your website visitors' engagement with your brand.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\user\UserInterface;

/**
 * Implements hook_help().
 */
function acquia_lift_help($route_name, RouteMatchInterface $route_match) {
  return \Drupal::service('acquia_lift.service.helper.help_message_helper')->getMessage($route_name);
}

/**
 * Implements hook_ENTITY_TYPE_view_alter().
 */
function acquia_lift_node_view_alter(array &$build, EntityInterface $node, EntityViewDisplayInterface $display) {
  // Create and attach settings and library only when:
  //   1) viewing a node in "full" mode, and
  //   2) path context agrees on attaching.
  if ($display->getOriginalMode() !== 'full' ||
    !\Drupal::service('acquia_lift.service.context.path_context')->shouldAttach()
  ) {
    return;
  }

  \Drupal::service('acquia_lift.service.context.page_context')->set($node);

  $attachments_manager = \Drupal::service('acquia_lift.service.manager.attachments_manager');
  $build['#attached']['drupalSettings']['acquia_lift'] = $attachments_manager->getDrupalSettings();
  $build['#attached']['library'][] = $attachments_manager->getLibrary();
}

/**
 * Implements hook_page_attachments().
 */
function acquia_lift_page_attachments(array &$page) {
  // Create and attach settings and library only when path context agrees on attaching.
  if (!\Drupal::service('acquia_lift.service.context.path_context')->shouldAttach()
  ) {
    return;
  }

  // Attach identity settings.
  $identity = \Drupal::service('acquia_lift.service.context.path_context')->getIdentity();
  if ($identity) {
    $page['#attached']['drupalSettings']['acquia_lift']['identity'] = $identity;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @todo: refactor to move logic into services as much as possible.
 */
function acquia_lift_form_node_type_form_alter(&$form, &$form_state) {
  $form['acquia_lift'] = [
    '#title' => t('Acquia Lift'),
    '#type' => 'details',
    '#tree' => TRUE,
    '#group' => 'additional_settings',
  ];

  // Find image fields.
  $node_type = $form_state->getFormObject()->getEntity()->id();
  $image_fields = _acquia_lift_get_image_fields('node', $node_type);
  if (empty($image_fields)) {
    $form['acquia_lift']['no_image_field'] = [
      '#type' => 'markup',
      '#markup' => '<div>' . t('This content type has no image field yet.') . '</div>',
    ];
    return;
  }

  // Find image styles.
  $image_styles = image_style_options(FALSE);
  if (empty($image_styles)) {
    $form['acquia_lift']['no_image_styles'] = [
      '#type' => 'markup',
      '#markup' => '<div>' . t('This site has no image style yet. Please define an image style first.') . '</div>',
    ];
    return;
  }

  $thumbnail_settings = \Drupal::config('acquia_lift.settings')->get('thumbnail');
  $node_type_thumbnail_settings = isset($thumbnail_settings[$node_type]) ?
    $thumbnail_settings[$node_type] :
    ['field' => '', 'style' => ''];
  $form['acquia_lift']['field'] = [
    '#type' => 'select',
    '#title' => t('Select preview image to use for content recommendations.'),
    '#options' => $image_fields,
    '#default_value' => $node_type_thumbnail_settings['field'],
    '#empty_option' => t('None'),
    '#empty_value' => '',
  ];
  $form['acquia_lift']['style'] = [
    '#type' => 'select',
    '#title' => t('Select the style to use for the thumbnail.'),
    '#options' => $image_styles,
    '#default_value' => $node_type_thumbnail_settings['style'],
    '#empty_option' => t('None'),
    '#empty_value' => '',
    '#states' => [
      'visible' => [
        ':input[name="acquia_lift[field]"]' => ['!value' => ''],
      ],
    ],
  ];

  $form['actions']['submit']['#submit'][] = 'acquia_lift_form_node_type_form_submit';
}

/**
 * Traverse the FieldableEntity and its fields, collect a field "roadmap" that
 * can lead to a image file.
 *
 * @param string $target_type
 *   Fieldable entity's identitfier.
 * @param string $type
 *   Type of the fieldable entity.
 * @param string $key_prefix
 *   The concatenated entity field keys that has been traversed through.
 * @param string $label_prefix
 *   The concatenated entity labels that has been traversed through.
 * @param array $processed_field_hashes
 *   A collection of hashes of fields that has already been processed.
 * @param array $image_fields
 *   The "roadmaps" to image fields that's been collected so far.
 */
function _acquia_lift_get_image_fields($target_type, $type, $key_prefix = '', $label_prefix = '', $processed_field_hashes = [], $image_fields = []) {
  $field_definitions = \Drupal::entityManager()->getFieldDefinitions($target_type, $type);
  foreach ($field_definitions as $field_key => $field_definition) {
    $field_type = $field_definition->getType();
    $field_target_type = $field_definition->getSetting('target_type');
    $field_label = $field_definition->getLabel();
    $full_label = $label_prefix . $field_label;
    $full_key = $key_prefix . $field_key;

    // Keep this field, if the field has already been processed.
    $field_hash = spl_object_hash($field_definition);
    if (isset($processed_field_hashes[$field_hash])) {
      continue;
    }
    $processed_field_hashes[$field_hash] = TRUE;

    // 1) Image type.
    if ($field_type === 'image') {
      $image_fields[$full_key] = $full_label . ' (' . $full_key . ')';
      continue;
    }

    // 2) Entity reference type.
    if ($field_type === 'entity_reference' &&
      \Drupal::entityManager()->getDefinition($field_target_type)->isSubclassOf('\Drupal\Core\Entity\FieldableEntityInterface')
    ) {
      $image_fields = _acquia_lift_get_image_fields($field_target_type, $field_type, $full_key . '->', $full_label . '->', $processed_field_hashes, $image_fields);
      continue;
    }
  }

  return $image_fields;
}

/**
 * Submit handler for the node type form with acquia lift options.
 *
 * @see acquia_lift_form_node_type_form_alter().
 */
function acquia_lift_form_node_type_form_submit($form, &$form_state) {
  $node_type = $form_state->getFormObject()->getEntity()->id();
  $settings = \Drupal::configFactory()->getEditable('acquia_lift.settings');
  $thumbnail_settings = $settings->get('thumbnail');
  $thumbnail_settings[$node_type] = $form_state->getValue('acquia_lift');
  $settings->set('thumbnail', $thumbnail_settings)->save();
}

/**
 * On user login (and user register) event, capture identity.
 *
 * Implements hook_user_login().
 */
function acquia_lift_user_login(UserInterface $user) {
  \Drupal::service('acquia_lift.service.context.path_context')->setIdentityByUser($user);
}
