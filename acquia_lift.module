<?php

/**
 * @file
 * Drupal Module: Acquia Lift
 *
 * Acquia Lift lets you track customers' behavior throughout their buying
 * journey â€” from anonymous visitor through to loyal customer. Acquia Lift
 * allows you to create a unified customer profile for each individual, based
 * on their interactions with your website. Using these profiles, Acquia Lift
 * adaptively segments customers in real-time, letting you deliver personalized
 * content that furthers your website visitors' engagement with your brand.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\node\NodeTypeInterface;

/**
 * Implements hook_help().
 */
function acquia_lift_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'acquia_lift.admin_settings_form':
      $help_message = t('You can find more info in <a href=":documentation_url" target="_blank">Documentation</a>', [':documentation_url' => 'https://docs.acquia.com/lift/']);
      $credential_settings = \Drupal::config('acquia_lift.settings')->get('credential');
      if(!empty($credential_settings['api_url'])) {
        $help_message .= t(', and control your web services settings at <a href=":acquia_lift_web_admin_url" target="_blank">Acquia Lift Web Admin</a>', [':acquia_lift_web_admin_url' => 'https://' . $credential_settings['api_url']]);
      }
      $help_message .= t('.');
      return $help_message;
  }
}

/**
 * Implements hook_page_attachments() to insert JavaScript to the appropriate scope/region of the page.
 */
function acquia_lift_page_attachments(array &$page) {
  $page_attachments_manager = \Drupal::service('acquia_lift.service.page.page_attachments_manager');
  // @todo: shouldAttach() should be extracted from page attachments manager because
  // when false, fewest (as opposed to, all) Lift services should be initialized.
  if (!$page_attachments_manager->shouldAttach()) {
    return;
  }

  $page['#attached']['drupalSettings']['acquia_lift'] = $page_attachments_manager->getDrupalSettings();
  $page['#attached']['library'][] = $page_attachments_manager->getLibrary();
}

/**
 * Implements hook_ENTITY_TYPE_view_alter() for node entities.
 */
function acquia_lift_node_view_alter(array &$build, EntityInterface $node, EntityViewDisplayInterface $display) {
  // When viewing a node, create populate its page context.
  if ($display->getOriginalMode() !== 'full') {
    return;
  }

  \Drupal::service('acquia_lift.service.context.page_context')->set($node);
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @todo: refactor to move logic into services as much as possible.
 */
function acquia_lift_form_node_type_form_alter(&$form, &$form_state) {
  $node_type = $form_state->getFormObject()->getEntity()->id();
  $field_definitions = \Drupal::entityManager()->getFieldDefinitions('node', $node_type);

  $thumbnail_fields = [];
  foreach ($field_definitions as $field_name => $field_definition) {
    if ($field_definition->getType() === 'image') {
      $thumbnail_fields[$field_name] = t($field_definition->getLabel()) . ' (' . $field_name . ')';
    }
  }
  if (empty($thumbnail_fields)) {
    return;
  }
  $thumbnail_styles = image_style_options(FALSE);
  if (empty($thumbnail_styles)) {
    return;
  }

  $thumbnail_settings = \Drupal::config('acquia_lift.settings')->get('thumbnail');
  $node_type_thumbnail_settings = isset($thumbnail_settings[$node_type]) ?
    $thumbnail_settings[$node_type] :
    ['field' => '', 'style' => ''];
  $form['acquia_lift'] = [
    '#title' => t('Acquia Lift'),
    '#type' => 'details',
    '#tree' => TRUE,
    '#group' => 'additional_settings',
  ];
  $form['acquia_lift']['field'] = [
    '#type' => 'select',
    '#title' => t('Select preview image to use for content recommendations.'),
    '#options' => $thumbnail_fields,
    '#default_value' => $node_type_thumbnail_settings['field'],
    '#empty_option' => t('None'),
    '#empty_value' => '',
  ];
  $form['acquia_lift']['style'] = [
    '#type' => 'select',
    '#title' => t('Select the style to use for the thumbnail.'),
    '#options' => $thumbnail_styles,
    '#default_value' => $node_type_thumbnail_settings['style'],
    '#empty_option' => t('None'),
    '#empty_value' => '',
    '#states' => [
      'visible' => [
        ':input[name="acquia_lift[field]"]' => ['!value' => ''],
      ],
    ],
  ];

  $form['actions']['submit']['#submit'][] = 'acquia_lift_form_node_type_form_submit';
}

/**
 * Submit handler for the node type form with acquia lift options.
 *
 * @see acquia_lift_form_node_type_form_alter().
 */
function acquia_lift_form_node_type_form_submit($form, &$form_state) {
  $node_type = $form_state->getFormObject()->getEntity()->id();
  $settings = \Drupal::configFactory()->getEditable('acquia_lift.settings');
  $thumbnail_settings = $settings->get('thumbnail');
  $thumbnail_settings[$node_type] = $form_state->getValue('acquia_lift');
  $settings->set('thumbnail', $thumbnail_settings)->save();
}
